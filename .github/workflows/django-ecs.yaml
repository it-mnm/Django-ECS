name: django-ecs

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
    env:
      AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
      ECR_REPOSITORY: djangoecr          # set this to your Amazon ECR repository name
      ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
      ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: ./task-definition.json # set this to the path to your Amazon ECS task definition
                                                   # file, e.g. .aws/task-definition.json
      CONTAINER_NAME: django-ecs           # set this to the name of the container in the  
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout
        uses: actions/checkout@v3
  
      - name: Set Up  Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
  
# docker hub를 이용할 때 사용
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: mh3769
      #     password: dckr_pat_psSd55_iVYzb59HnJa8YmORKvBs
  
      # - name: build and release to DockerHub
      #   env:
      #     NAME: mh3769
      #     REPO: django-ecs
      #   run: |
      #     docker build -t $REPO .
      #     docker tag $REPO:latest $NAME/$REPO:latest
      #     docker push $NAME/$REPO:latest
 
      - name: Build Docker Compose
        run: docker-compose

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::207955846572:role/Django-ECS-Role
          role-session-name: sampleSessionName
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
  
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true